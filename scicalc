
#!/usr/bin/env python
#
# A simple command-line scientific calculator.
#

import sys, math

def die_with_usage(message):
	print("\n****\n**** error: {}\n****\n".format(message), file=sys.stderr)
	print("usage:\n\n    {} <operator> [arg1 [arg2 [...]]]\n".format(sys.argv[0]), file=sys.stderr)
	print(", where <operator> can be one of:\n", file=sys.stderr)
	for (op, func) in operators.items():
		print("    {}: {}".format(op, func.__doc__), file=sys.stderr)
	print("", file=sys.stderr)
	exit(-1)

#
# The operators.
#
# These functions must take the necessary number of arguments, and return
# the result of the operation. They must have a short docstring explaining
# what they do (it will be printed by the die_with_usage() function).
#
# Exceptions:
#   - If an incorrect number of arguments is passed, the function must raise a TypeError.
#   - If there's a problem with argument values (e.g., a negative number passed to log),
#     the function must raise a ValueError.
#

def sin(x):
	"""take the sine of an angle given in degrees"""
	
	return math.sin(math.radians(x))

def deg2rad(x):
	"""Return a radian equivalent of x originaly in degrees"""
	return (x*math.pi)/180

def add(*args):
	"""Add a list of numbers"""

	sum = 0.0
	for arg in args:
		sum += arg
	return sum
    
def sub(*args):
	"""Substracts all subsequent numbers in a list from the first number"""

	sub = args[0]
	for arg in args[1:]:
		 sub -= arg
	return sub

def log10(x):
	"""Return a base-10 logarithm of x"""
	
	return math.log10(x)

def floordiv(a, b):
	"""Takes the floor division of two numbers"""
	return a//b

def tang(a):
	"""inputs are floats and in degrees and output will be tangent of input"""
	self.state = math.tan(a)
	return self.state

def mul(*args):
	"""Multiply a list of numbers"""
	
	prod = 1.0
	for arg in args:
		prod *= arg
	return prod
    
def acos(*args):
    """Returns the inverse cosine of an output in radians"""
    
    for arg in args:
        return math.acos(arg)

def abs(x):
	"""Return absolute value of number"""

	if x < 0:
		return -x
	else:
		return x
  
def root(x,y):
	"""Take the Nth root of a number"""
	    
	return y**(1/x)    

def exp(x):
    """Return Euler's number to the power of x"""
    
    return math.exp(x)

def arcsin(x):
	"""Return value of arcsin of value x"""
	return math.asin(x)

def log(base,x):
	"""Return a logarithm (of of any base base) of x"""
	
	return math.log(x, base)

def pow(x, y):
	"""Takes a number (x) and exponentiate to a power (y)"""
	
	return x**y

def inv(x):
	"""Return the inverse of a number"""
	return 1/x

def sqrt(x):
	"""Return square root of x"""
	return math.sqrt(x)

def ceil(x):
	"""Rounds number to next largest integer"""
	
	return math.ceil(x)

def div(x, *args):
    """Division function that divides an input x, by an another input arg"""
    """To divide fractions, give them as decimals"""
    for arg in args:
        prod = x / arg
    return prod

def cos(x):
	"""Return a cosine function of x in radians"""
	
	return math.cos(x)

def log(base,x):
	"""Returns the natural log of x"""

	return math.log(x)

def negOp(x):
	"""Return the negative of x"""
	
	return(-1 * x)

def fact(n): 
    """Returns the factorial of a number."""
    if n < 0: 
        return 'na'
    elif n == 0:
        return 1
    else:
        fact = 1
        for i in range(1,int(n)+1):
            fact *= i
        return fact

def asin(x):
    """Takes arcsine/inverse sine of angle x. x must be between -1 and 1. Returns degrees."""
    return round(math.degrees(math.asin(x)),3)

def ten(x):
	"""Returns 10 to the power of x"""
	return 10**x
	

#
# The dictionary that maps the command-line name of the operation,
# to the function that performs it. There can be multiple names
# for the same operator (e.g., 'add' and 'sum').
#

operators = {
	'add': add,
	'sum': add,
	'inv': inv,
	'sin': sin,
	'mul': mul,
    'asin': asin,
	'log10': log10,
	'log': log,
    'acos' : acos,
	'abs': abs,
	'arcsin':arcsin,
	'pow': pow,
	'sub': sub,
	'div': div,
	'root': root,
    'deg2rad':deg2rad,
    'exp': exp,
  	'log': log,
	'floordiv': floordiv,
	'sqrt': sqrt,
	'ceil':ceil,
	'mul': mul,
	'cos': cos,
	'negOp': negOp,
	'tang': tang,
    'fact': fact,
    'ten': ten
}

if __name__ == "__main__":
	#
	# Collect and parse arguments
	#
	try:
		op = sys.argv[1]
		args = [ float(arg) for arg in sys.argv[2:] ]
	except IndexError:
		die_with_usage("Insufficient number of arguments.")
	except ValueError as e:
		die_with_usage(e)

	#
	# Run the requested operation, and print the result
	#
	try:
		print(operators[op](*args))
	except KeyError:
		die_with_usage("Unknown operator '{}'.".format(op))
	except TypeError as e:
		die_with_usage(e)
	except ValueError as e:
		die_with_usage(e)
